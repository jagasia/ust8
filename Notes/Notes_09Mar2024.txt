Live Session: Java-Live Solving Practice 
-----------------------------------------------------
Part I: Basic Java Problems
-------------------------------------
	i can conduct Poll with one question and 4 options

Part 2: Arrays Problems
---------------------------------
	Code based 
	practical

Part 3: String Proble
----------------------------
	Code based 
	practical

----------------------------------------
A) A call to instance method can not be made from static context.
B) A call to static method can  be  made from non static context


static context
	static block
	static method
	static variable	(ignore)

static block is very early.
	static block is executed first and then only first line of main method is executed.
static method
	can be called even without any object of the class
	can be called even before any object of the class is created.
		in that case, how can this static method call an instance method??????????
		an instance method is available when an instance (object) is available 


public class App
{
	static 
	{
		System.out.println("Static block is executed");
	}
	public static void method1()
	{
		System.out.println("static method is called");
		method2();
//App.java:10: error: non-static method method2() cannot be referenced from a static context
//                method2();

	}
	public void method2()
	{
		System.out.println("Instance method is called");
	}
	public static void main(String []args)	
	{
		System.out.println("First line of main method");
		method1();
		App a=new App();

	}
}
----------------
That question based on method overloading (function overloading)
multiple methods are allowed to have same name but different signature.
	signature is 
		number of arguments
		data type of arguments
		order of the type of arguments

		return type can be same or different, but that does not matter.
		if return type is the only difference, then it is not allowed.

-----------------------------------
class Order{
Order(){
System.out.println(""Cat"");
}
public static void main(String... Args){
System.out.println(""Ant"");
}
static{
System.out.println(""Dog"");
}
{
System.out.println(""Man"");
}}


kindly ignore double double quotes.

since we have not created any instance (object) of the class, 
	instance block does not execute		(so no "Man")
	constructor is not executed		(so no "Cat")


static block first
	so, 	"Dog"
	main method 1st line  "Ant"




class Test
{ 
	private void display(){		//non-static 
		System.out.println("Display()");
	}

	private static  void show() { 
		display();			//compilation error
		System.out.println("show()");
	}
	
	public static void main(String arg[]){
		show();
	}
}

------------------------------------------------------------
What will be the output of following code? 

import java.util.*; 
class I 
{
    public static void main (String[] args) 
    {
        Object i = new ArrayList().iterator(); 
        System.out.print((i instanceof List)+","); 		false
        System.out.print((i instanceof Iterator)+","); 		true
        System.out.print(i instanceof ListIterator); 		false
    } 
}
----------------------------------------------------------------

Unique Product of digits in an array

Shwetha bought an array and she thought to reduce it. Instead of simply rejecting the numbers she decided to find the unique product of digits in it. Product of digits is found by multiplying each of the digits of the given numbers in the array. After finding the products, the unique product values are counted. Given an array of integers of length N, write a program to check the number of unique digits in it .

Input format:
First input is an integer that denotes the N value, size of the array. 1<=N<=100.
Second line of the input is a series of integers separated by a space that denotes the array values.

Output format:
Output is an integer that denotes the number of unique product of digits in the input array..

Sample Input 1:
6
2 8 121 43 222 29
Sample Output 1:
4

Explanation:
For a = [2, 8, 121, 43, 222, 29], the output should be
uniqueDigitProducts(a) = 4.

Here are the products of the array's elements:

    2: product(2) = 2;
    8: product(8) = 8;
    121: product(121) = 1 * 2 * 1 = 2;
    43: product(42) = 4 * 3 = 12;
    222: product(222) = 2 * 2 * 2 = 8;
    29: product(23) = 2 * 9 = 18.

As you can see, there are only 4 different products: 2,8 ,12 and 18.

Sample Input 2:
5
3 4 1 5 2
Sample Output 2:
5 

https://github.com/jagasia/ust8/blob/jag/Notes/Notes_09Mar2024.txt


1) visit every element of the array
	either
	i) for loop
	ii) for each loop
2) find the digit product of each element
3) add this product to a Set	(Set is a collection of distinct elements)
4) display the size of the set


import java.util.LinkedHashSet;
import java.util.Scanner;
import java.util.Set;

public class UniqueProductOfDigits {

	private static int digitProduct(int num)
	{
		//write your code here
		//get each digit from num
		//by using % 10 operator, we can get last digit of a number
		//by using / 10 operator, we can remove last digit
		//loop untile, the num > 0
		int product=1;
		while(num>0)
		{
			int digit=num%10;		//last digit
			product*=digit;
			num/=10;
		}
		return product;
	}
	
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int arr[]=new int[n];
		for(int i=0;i<n;i++)
		{
			arr[i]=sc.nextInt();
		}
		
		
		///write code here...
		Set<Integer> set=new LinkedHashSet<>();
		for(int x : arr)
		{
//			System.out.print(x+"\t");
			//find the product of digits
			int product = digitProduct(x);
//			System.out.println(product);
			set.add(product);
		}
		
		System.out.println(set.size());
	}

}

-----------------------------------------
1) Find the cellphone tower coverage
2) Check if the mobile lock pattern is valid or not

Mobile lock pattern

https://github.com/jagasia/ust8/blob/jag/Java/Mobile%20Lock%20Pattern.docx
Mobile Lock Pattern 
 
Given the coordinates of  a lock pattern configuration, check whether it is a Valid Lock Pattern or not. A valid Lock pattern will be formed only by joining the adjacent neighbours.  If it is a valid lock pattern and if there is 
       1)   Above 75% coverage, print "Excellent", 
       2)  Above 50% coverage, print "Good", 
       3)  Above 25% coverage, print "Average", 
       4)  Else print "Poor". 
(Coverage need to be calculated with respect to the total grid size) 
        If it is an  invalid lock pattern, print "Invalid". 
Assume that the pattern grid will always be a square. 
Note: 
To make the problem less complicated the following relaxations are made: 
1) The testcases will not contain any overlap through a point in the pattern. 
2) The pattern will always end at a new point. 
3) The points given in the testcases always lie within the pattern grid. No need to check if the point is outside the grid. 
Input Format: 
The first line is an integer that corresponds to the side length of the pattern grid. 
The second line is an integer that corresponds to the number of coordinates in the lock pattern, n. 
The following n lines have the following pattern : x-coor y-coor 

Output Format: 
Print "Invalid" if there is the pattern is not properly linked, else print "Excellent " or "Good" or "Average" or "Poor", based on the number of points covered. 

Sample Input 1: 
3 
5 
1 1 
2 1 
3 1 
2 2 
3 3 
Sample Output 1: 
Good 

Sample Input 2: 
3 
6 
1 1 
2 1 
3 1 
2 2 
3 1 
3 3 
Sample Output 2: 
Invalid
 
 

Algorithm to solve this problem:
----------------------------------------------
very simple.
to check if the pattern is valid or not.
You just have to check if the co ordinates are adjacent or not.

difference between
	x1 and x2
	y1 and y2
can be either
-1
0
1

only above these are allowed. Else, it is invalid pattern.

import java.util.Arrays;
import java.util.Scanner;

public class MobileLockPattern {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int sideLength=sc.nextInt();
		int points=sc.nextInt();
		int coordinates[][]=new int[points][2];
		boolean isValid=true;
		for(int i=0;i<points;i++)
		{
			coordinates[i][0]=sc.nextInt();
			coordinates[i][1]=sc.nextInt();
		}
		
//		System.out.println(Arrays.deepToString(coordinates));
		
		//walk through the coordinates
		for(int i=0;i<points-1;i++)
		{
			int x1=coordinates[i][0];
			int y1=coordinates[i][1];
			
			int x2=coordinates[i+1][0];
			int y2=coordinates[i+1][1];
			
//			System.out.println(x1+"\t"+y1);
//			System.out.println(x2+"\t"+y2);
			
//			System.out.println();
//			the absolute difference should be <=1
			int diffX=Math.abs(x1-x2);
			int diffY=Math.abs(y1-y2);
			if(diffX>1 || diffY>1 )
			{
				isValid=false;
				break;
			}
			
		}
		if(isValid)
		{
			//check grade
			int total=sideLength*sideLength;
			float coverage=(float)points/total*100;
			if(coverage>75)
			{
				System.out.println("Excellent");
			}else if(coverage>50)
			{
				System.out.println("Good");
			}else if(coverage>25)
			{
				System.out.println("Average");
			}else
			{
				System.out.println("Poor");
			}
		}else
		{
			System.out.println("Invalid");
		}
	}

}
-----------------------------------------------------
Character at Index

Somu has an excellent visualization skill using which he answers any logical and arithmetic calculation by mind calculation. To test his skill, Ramu gave him the following question. Given a String, s, and an integer, i, find the character present at the given index, i, when the string is repeatedly concatenated.
Write a program to  help Somu.

Input Format:
First line of the input is the string, s. Assume max length of the string is 50.
Second line is an Integer that denotes the index value, i.

Output Format:
Output is a character present at ith index.

Note:
Print "Invalid" if the index is negative.

Sample Input 1:
Amphibian
25
Sample Output 1:
a

Sample Input 2:
Java
-1
Sample Output 2:
Invalid 


Explanation for Sample1:
input String is "Amphibian".
After repeated concatenation, the string becomes "AmphibianAmphibianAmphibianAmphibian......"
The character at 25 th index is 'a'. 




